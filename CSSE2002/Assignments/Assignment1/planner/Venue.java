package planner;

/**
 * <p>
 * An immutable class representing a venue in the municipality.
 * </p>
 * <p>
 * <p>
 * A venue has a name and a capacity. The capacity of the venue is an integer
 * greater than zero that represents the maximum number of people who can attend
 * the venue at the same time for an event. A venue can only host events with a
 * size less than or equal to its capacity.
 * </p>
 * <p>
 * <p>
 * Hosting an event at a venue generates traffic on some traffic corridors in
 * the municipality.
 * </p>
 * <p>
 * <p>
 * The amount of traffic that is generated on each corridor is - except for
 * integer truncation - linearly proportional to the size of the event: if an
 * event of maximum size C for the venue would generate traffic X on a corridor,
 * then an event of size K would generate (K*X)/C traffic on that corridor.
 * (Note that the integer division truncates the decimal places of the
 * division.)
 * </p>
 */
public class Venue {

    // The name of the venue
    private String name;
    // The capacity of the venue
    private int capacity;
    //the traffic generated by hosting an event of size capacity at the venue
    private Traffic capacityTraffic;

    // Correct line separator for executing machine (used in toString method)
    private final static String LINE_SEPARATOR = System.getProperty(
            "line.separator");

    /*  Invariant:
     *  name != null &&
     *  capacity > 0 &&
     *  capacityTraffic != null
     */

    /**
     * Creates a new venue with the given name, and capacity, that generates the
     * traffic described by parameter capacityTraffic for an event of size
     * capacity at the venue.
     *
     * @param name            the name of the venue
     * @param capacity        the capacity of the venue
     * @param capacityTraffic the traffic generated by hosting an event of size
     *                        capacity at the venue
     * @throws NullPointerException     if either name or capacityTraffic
     *                                  are null
     * @throws IllegalArgumentException if capacity is less than or equal
     *                                  to zero.
     * @throws InvalidTrafficException  if the traffic on any corridor described
     *                                  by capacityTraffic is greater than the
     *                                  capacity of the venue (i.e. you can't
     *                                  generate more traffic for a corridor
     *                                  than you have people at the venue.)
     */
    public Venue(String name, int capacity, Traffic capacityTraffic) {
        if (name == null) {
            throw new NullPointerException("name is null");
        } else if (capacityTraffic == null) {
            throw new NullPointerException("capacityTraffic is null");
        } else if (capacity <= 0) {
            throw new IllegalArgumentException("capacity less <= 0.");
        }

        this.name = name;
        this.capacity = capacity;
        this.capacityTraffic = capacityTraffic;

        //Check all corridors to check if they are greater than capacity
        for (Corridor c : capacityTraffic.getCorridorsWithTraffic()) {
            if (capacityTraffic.getTraffic(c) > this.capacity) {
                throw new InvalidTrafficException(
                        "Traffic greater than capacity");
            }
        }
    }

    /**
     * Returns the name of the venue.
     *
     * @return the name of the venue
     */
    public String getName() {
        return this.name;
    }

    /**
     * Returns the capacity of the venue.
     *
     * @return the capacity of the venue
     */
    public int getCapacity() {
        return this.capacity;
    }

    /**
     * Returns true if the size of the event is less than or equal to the
     * capacity of the venue, and false otherwise.
     *
     * @param event the event whose compatibility with this venue will be
     *              checked
     * @return true iff the capacity of the venue is greater than or equal to
     * the size of the event.
     * @throws NullPointerException if event is null
     */
    public boolean canHost(Event event) {
        if (event == null) {
            throw new NullPointerException("event is null.");
        }
        return capacity >= event.getSize();
    }

    /**
     * <p>
     * Returns the amount of traffic that would be generated by hosting the
     * given event at this venue.
     * </p>
     * <p>
     * <p>
     * For each corridor c, the traffic generated by the event on that corridor
     * is defined to be the integer ((K * X) / C), where K is the size of the
     * event, C is the capacity of this venue and X is the traffic generated by
     * an event of size C at this venue on corridor c.
     * </p>
     * <p>
     * <p>
     * (This definition means that the amount of traffic that is generated on
     * each corridor is - except for the integer truncation - linearly
     * proportional to the size of the event.)
     * </p>
     *
     * @param event the event for which the traffic will be generated
     * @return the traffic generated by hosting the given event at this venue
     * @throws NullPointerException     if event is null
     * @throws IllegalArgumentException if the size of the event exceeds the
     * capacity of the venue
     */
    public Traffic getTraffic(Event event) {
        if (event == null) {
            throw new NullPointerException("event is null.");
        } else if (event.getSize() > this.capacity) {
            throw new IllegalArgumentException(
                    "event size greater than capcity");
        }

        int eventSize = event.getSize(); // Size of event.
        int venueCapacity = this.capacity; // Capacity of venue.
        int traffic;
        Traffic returnTraffic = new Traffic();

        for (Corridor c : capacityTraffic.getCorridorsWithTraffic()) {
            traffic = capacityTraffic.getTraffic(c);
            int corridorTraffic = ((eventSize * traffic) / venueCapacity);
            returnTraffic.updateTraffic(c, corridorTraffic);
        }

        return returnTraffic;
    }

    /**
     * The string representation of a venue is a string of the form <br>
     * <br>
     * <p>
     * "NAME (CAPACITY)" + LINE_SEPARATOR + "CAPACITYTRAFFIC"<br>
     * <br>
     * <p>
     * where NAME is the name of the venue, CAPACITY is the capacity of the
     * venue, LINE_SEPARATOR is the line separator retrieved in a
     * machine-independent way by calling System.getProperty("line.separator"),
     * and CAPACITYTRAFFIC is the toString() representation of the Traffic
     * object describing the traffic generated by hosting an event of size
     * capacity at the venue.
     */
    @Override
    public String toString() {
        return name + " (" + capacity + ")" + LINE_SEPARATOR + capacityTraffic;
    }

    /**
     * Returns true if and only if the given object
     * <p>
     * (i) is an instance of the class Venue
     * <p>
     * (ii) with a name that is equal to this venue's name (according to the
     * equals method of the String class),
     * <p>
     * (iii) a capacity that is equal to this venue's capacity and
     * <p>
     * (iv) generates the same traffic as this venue for an event of maximum
     * size (capacity) at the venue. (The amount of traffic generated is the
     * same if it is the same according to the sameTraffic() method of the
     * Traffic class).
     */
    @Override
    public boolean equals(Object object) {
        return object instanceof Venue &&
                ((Venue) object).name.equals(this.name) &&
                ((Venue) object).capacity == this.capacity &&
                ((Venue) object).capacityTraffic.
                        sameTraffic(this.capacityTraffic);
    }

    @Override
    public int hashCode() {
        int result = 19;
        int prime = 31541;
        result += this.name.hashCode() * prime;
        result += this.capacity * prime;
        return result;
    }

    /**
     * <p>
     * Determines whether this class is internally consistent (i.e. it satisfies
     * its class invariant).
     * </p>
     * <p>
     * <p>
     * NOTE: This method is only intended for testing purposes.
     * </p>
     *
     * @return true if this class is internally consistent, and false otherwise.
     */
    public boolean checkInvariant() {
        return name != null && capacity > 0 && capacityTraffic != null;
    }

}
